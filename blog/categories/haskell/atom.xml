<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | 植臻]]></title>
  <link href="http://zhizhen.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://zhizhen.github.io/"/>
  <updated>2019-04-11T11:10:37+08:00</updated>
  <id>http://zhizhen.github.io/</id>
  <author>
    <name><![CDATA[张植臻]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[haskell(二)]]></title>
    <link href="http://zhizhen.github.io/blog/2013/12/03/haskell-er/"/>
    <updated>2013-12-03T11:50:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/12/03/haskell-er</id>
    <content type="html"><![CDATA[<p>在haskell(一)中学习了haskell的基本语法。在输入ghci之后能够进入haskell终端，
在终端里可以执行运算，写一些简单的函数，接下来要在文件中写代码，并编译，执行<br/>
创建hello.hs文件</p>

<!--more-->


<pre><code>main = putStrLn "Hello world !"
</code></pre>

<p>保存之后，编译</p>

<pre><code>ghc -o hello hello.hs
</code></pre>

<p>编译之后执行</p>

<pre><code>./hello
</code></pre>

<p>便能够看到</p>

<pre><code>Hello world !
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haskell(一)]]></title>
    <link href="http://zhizhen.github.io/blog/2013/11/30/haskell-1/"/>
    <updated>2013-11-30T10:00:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/11/30/haskell-1</id>
    <content type="html"><![CDATA[<p>Haskell是一门纯函数式语言。它因为monads以及其类型系统而出名，初窥haskell,倒是觉得
其中的列表跟erlang特别像。<br/>
下面是基础语法：</p>

<!--more-->


<pre><code>-- 单行注释以两个破折号开头
{-  多行注释被
    一个闭合的块包围
-}
-----------------------------------------------
-- 1. 简单地数据类型和操作符
-----------------------------------------------

-- 你有数字
3 --3
-- 数学计算就像你所期待的那样
1 + 1 --2
8 - 1 --7
10 * 2 --20
35 / 5 --7.0 注意这里除了之后是浮点数
35 `div` 5 -- 7 
True
False
not True
not False
1 == 1 -- True
1 /= 1 -- False
1 &lt; 10 -- True
"This is a string" -- 字符串用双引号
'a' -- 字符用单引号
"Hello" ++ "world !" -- "Hello world !" 字符串连接
"This is a string" !! 0 -- 一个字符串是一系列字符，取第一个就是'T'

-----------------------------------------------
-- 列表和元组 
-----------------------------------------------

-- 一个列表中得每一个元素都必须是相同类型
[1, 2, 3, 4, 5] == [1..5] -- True

-- 在haskell 你可以拥有含有无限元素的列表
[1..] -- 一个含有所有自然数的列表

-- 因为haskell 有“懒惰计算”，所以无限元素的列表可以正常运作。这意味着
-- haskell 可以只在它需要的时候计算。所以你可以请求
-- 列表中的第1000个元素，haskell 会返回给你
[1..] !! 999 -- 1000

-- haskell 计算了列表中 1 - 1000 个元素。。但是
-- 这个无限元素的列表中剩下的元素还不存在！ haskell 不会
-- 真正地计算它们直到它需要

-- 连接两个列表
[1..5] ++ [6..10]

-- 往列表头增加元素
0:[1..5] -- [0, 1, 2, 3, 4, 5]

-- 列表中的下标
[0..0] !! 5 -- 5

-- 更多的列表操作
head [1..5] -- 1
tail [1..5] -- [2, 3, 4, 5]
init [1..5] -- [1, 2, 3, 4]
last [1..5] -- 5

-- 列表推导
[x * 2 | x &lt;- [1..5]] -- [2, 4, 6, 8, 10]

-- 附带条件
[x * 2 | x &lt;- [1..5], x * 2 &gt; 4] -- [6, 8, 10]

-- 元组中的每一个元素可以是不同类型的，但是一个元组
-- 的长度是固定的
-- 一个元组
("haskell", 1)

-- 获取元组中的元素
fst("haskell", 1) -- "haskell"
snd("haskell", 1) -- 1

-----------------------------------------------
-- 3. 函数 
-----------------------------------------------
-- 一个接受两个变量的简单函数
add a b = a + b

-- 注意，如果你使用ghci（haskell 解释器）
-- 你将需要使用 `let`, 也就是
-- let add a b = a + b

-- 使用函数
add 1 2 -- 3

-- 你也可以把函数放置在两个参数之间
-- 附带倒引号:
1 `add` 2 --3

-- 你也可以定义不带字符的函数！这使得
-- 你定义自己的操作符！这里有个操作符
-- 来做整除
(//) a b = a `div` b
35 //4 --8

-- 守卫: 一个简单的方法在函数里做分支
fib x
  | x &lt; 2 =x
  | otherwise = fib (x -1) + fib (x -2)

-- 模式匹配是类型的。这里有三种不同的fib
-- 定义。haskell将自动调用第一个
-- 匹配值的模式的函数。
fib 1 = 1
fib 2 = 2
fib x = fib (x - 1) + fib (x - 2)

-- 元组的模式匹配
foo (x, y) = (x + 1, y + 2)

-- 列表的模式匹配。 这里 `x`是列表的第一个元素，
-- 并且 `xs` 是列表剩余的部分。我们可以写
-- 自己的map 函数
myMap func [] = []
myMap func (x:xs) = func x:(myMap func xs)

-- 编写出来的匿名函数带有一个反斜杠，后面跟着
-- 所有的参数
myMap (\x -&gt; x + 2)[1..5] -- [3, 4, 5, 6, 7]

-- 使用fold （在一些语言称为`inject`）随着一个匿名的
-- 函数。foldl1 意味着左折叠(fold left), 并且使用列表中的第一个值
-- 作为累加器的初始化值。
foldl1(\acc x -&gt; acc + x) [1..5] -- 15

----------------------------------------------------------
-- 4. 更多函数
----------------------------------------------------------

-- 柯里化(currying):如果你不传递函数中所有的参数，
-- 它就变成“柯里化的”。这意味着，它返回一个接受剩余参数的函数.

add a b = a + b
foo = add 10 -- foo 现在是一个接受一个数并对其加10的函数
foo 5 -- 15

-- 另外一种方式去做同样的事
foo = (+10)]
foo 5 -- 15

-- 函数组合
-- (.) 函数把其他函数链接到一起
-- 举个例子，这里foo是一个接受一个值的函数。它对接受的值加10，
-- 并对结果乘以5， 之后返回最后的值
foo = (*5) . (+10)

-- (5 + 10) * 5 = 75
foo 5 --75

-- 修复优先级
-- haskell 有另外一个函数称为 `$`. 它改变优先级
-- 使得其左侧的每一个操作先计算然后应用到
-- 右侧的每一个操作。你可以使用 `.` 和 `$` 来除去很多
-- 括号:

-- before
(even (fib 7)) -- true

- after
even . fib $ 7 -- true

------------------------------------------------------------
-- 5. 类型签名
------------------------------------------------------------

-- haskell 有一个非常强壮的类型系统，一切都有一个类型签名。
-- 一些基本的类型
5 :: Integer
"hello" :: String
True :: Bool

-- 函数也有类型
-- `not` 接受一个布尔型返回一个布尔型:
-- not :: Bool -&gt; Boll

-- 这是接受两个参数的函数:
--add :: Integer -&gt; Integer -&gt; Integer

-- 当你定义一个值，在其上写明它的类型是一个好实践
double :: Integer -&gt; Integer
double x = x * 2

-------------------------------------------------------------
-- 6. 控制流和If语句
-------------------------------------------------------------
-- if 语句
haskell = if 1 == 1 then "awesome" else "awful" -- haskell = "awesome"

-- if 渔具也可以有多行，缩进是很重要的
haskell = if 1 == 1
            then "awesome"
            else "awful"

-- case 语句:这里是你可以怎样去解析命令行参数
case args of
    "help" -&gt; printHelp
    "start" -&gt; startProgram
    _ -&gt; putStrLn "bad args"

-- haskell 没有循环因为它使用递归取代之。
-- map 应用一个函数到数组中的每一个元素

map (*2)[1..5] -- [2, 4, 6, 8, 10]

-- 你可以使用map来编写for函数
for array func = map func array

-- 然后使用它
for [0..5] $ \i -&gt; show i

-- 我们也可以这样写
for [0..5] show

-- 你可以使用foldl或者foldr来分解列表
-- foldl (\x y -&gt; 2*x + y) 4 [1, 2, 3] -- 43

-- 这和下面是一样的
(2 * (2 * (2 * 4 + 1) + 2) + 3)

--foldl 是左手边的，foldr是右手边的
foldr (\x, y -&gt; 2*x + y) 4 [1, 2, 3] -- 16

-- 这和下面的是一样的
(2 * 3 + (2 * 2 + (2 * 1 + 4)))

-------------------------------------------------------
-- 7. 数据类型
-------------------------------------------------------

-- 这里展示在haskell 中你怎样编写自己的数据类型
data Color = Red | Blue | Green

-- 现在你可以在函数中使用它

say :: Color -&gt; String
say Red = "You are Red !"
say Blue = "You ara Blue!"
say Green = "You are Green!"

-- 你的数据类型也可以有参数

data Maybe a = Nothing | Just a

-- 类型 Maybe 的所有
Just "hello"    -- of type `Maybe String`
Just 1          -- of type `Maybe Int`
Nothing         -- of type `Maybe a` for any `a`

--------------------------------------------------------
-- 8. haskell IO
--------------------------------------------------------

-- 虽然在没有解释monads 的情况下，IO不能被完全地解释，
-- 着手解释到位并不难

-- 当一个haskell程序被执行，函数`main` 就被调用。
-- 它必须返回一个类型`IO()`的值。举个例子

main :: IO ()
main = putStrLn $ "Hello, sky! " ++ (say Blue)
-- putStrLn has type String -&gt; IO ()

-- 如果你能实现你的程序依照函数从String到String，那样编写IO是最简单的。
-- 函数
--      interact :: (String -&gt; String) -&gt; IO ()
-- 输入一些文本，在其上运行一个函数，并打印出输出

countLines :: String -&gt; String
countLines = show . length . lines

main' = interact countLines

-- 你可以考虑一个 `IO()` 类型的值，当做一系列计算机所完成的动作的代表
-- 就像一个以命令式语言编写的计算机程序。我们可以使用`do`符号来把动作连接到一起。
-- 举个例子

sayHello :: IO ()
sayHello = do
    putStrLn "What is your name?"
    name &lt;- getLine -- this gets a line and gives it the name "input"
    putStrLn $ "Hello, " ++ name

-- 练习：编写只读取一行输入的`interact`

-- 然而,`sayHello` 中得代码将不会被执行。唯一 被执行的动作是`main`的值。
-- 为了运行 `sayHello`, 注释上面`main` 的定义，并代替它:
-- main = sayHello

--让我们来更好地理解刚才所使用的函数 `getLine` 是怎样工作的。它的类型是：
-- getLine :: IO String
-- 你可以考虑一个 `IO a` 类型的值，代表一个当被执行的时候
-- 将产生一个 `a` 类型的值的计算机程序（除了它所做的任何事情之外）。我们可以保存
-- 和重用这个值通过`&lt;-`
-- 我们也可以写自己的 `IO String` 类型的动作

action :: IO String
action = do
    putStrLn "This is a line, Duh"
    input1 &lt;- getLine
    input2 &lt;- getLine
    -- The type of the `do` statement is that of its last line
    -- `return` is not a keyword, but merely a function
    return (input1 ++ \n ++ input2) --return :: String -&gt; IO String

-- 我们可以使用这个动作就像我们使用 `getLine`:
main'' = do
    putStrLn "I will echo two lines!"
    result &lt;- action
    putStrLn result
    putStrLn "This was all, folks!"

-- `IO` 类型是一个"monad"的例子，haskell使用一个monad来 做IO得方式允许它是一门纯函数式语言。
-- 任何与外界交互的函数（也就是IO）都在它的类型签名处做一个`IO`标识
-- 这让我们推出 什么样的函数是“纯洁的”（不与外界交互，不修改状态）和 什么呀的函数是“不纯洁的”

-- 这是一个强有力的特征，因为并发地运行纯函数是简单的；因此，haskell中并发是非常简单的。

------------------------------------------------------------
-- 9. the haskell REPL
------------------------------------------------------------
-- 键入 `ghci` 开始repl.
--任何新值都需要通过 let 来创建
let foo = 5

-- 你可以查看任何值的类型，通过命令 :t
:t foo
foo :: Integer

-- 你也可以运行任何 `IO ()` 类型的动作

&gt;sayHello
What is your name?
Friend!
Hello, Friend!
</code></pre>
]]></content>
  </entry>
  
</feed>
