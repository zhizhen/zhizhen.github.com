<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2dx | 植臻]]></title>
  <link href="http://zhizhen.github.io/blog/categories/cocos2dx/atom.xml" rel="self"/>
  <link href="http://zhizhen.github.io/"/>
  <updated>2019-05-14T21:44:45+08:00</updated>
  <id>http://zhizhen.github.io/</id>
  <author>
    <name><![CDATA[张植臻]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cocos2dx解密执行lua文件]]></title>
    <link href="http://zhizhen.github.io/blog/2013/11/22/cocos2dxjie-mi-zhi-xing-luawen-jian/"/>
    <updated>2013-11-22T20:54:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/11/22/cocos2dxjie-mi-zhi-xing-luawen-jian</id>
    <content type="html"><![CDATA[<p>前一篇写了怎么将lua文件加密成，那么接着就该在cocos2dx中修改代码，使之能执行
解密后的lua代码了</p>

<!--more-->


<hr />

<p>cocos2dx是这样使用lua引擎的</p>

<pre><code>// 初始化lua引擎
CCLuaEngine* pEngine = CCLuaEngine::defaultEngine();
CCScriptEngineManager::sharedManager()-&gt;setScriptEngine(pEngine);

CCLuaStack *pStack = pEngine-&gt;getLuaStack();

pStack-&gt;addLuaLoader(cocos2dx_lua_loader);
</code></pre>

<p>这里添加了cocos2dx_lua_loader,那么，在cocos2dx_lua_loader里面：</p>

<pre><code>int cocos2dx_lua_loader(lua_State *L)
{
    std::string filename(luaL_checkstring(L, 1));
    // 这里我们将它改成查找.so后缀的lua文件
    size_t pos = filename.rfind(".so");
    if (pos != std::string::npos)
    {
        filename = filename.substr(0, pos);
    }

    pos = filename.find_first_of(".");
    while (pos != std::string::npos)
    {
        filename.replace(pos, 1, "/");
        pos = filename.find_first_of(".");
    }
    //后缀改为.so
    filename.append(".so");

    //使用一个tmpBuffer来读取密文
    unsigned long tmpSize = 0;
    unsigned char* tmpBuffer = CCFileUtils::sharedFileUtils()-&gt;getFileData(filename.c_str(), "rb", &amp;tmpSize);
    if(!tmpBuffer){ return 1;}

    //解密后再传给codeBuffer执行
    unsigned long codeBufferSize = 0;
    unsigned char* codeBuffer = xxtea_decrypt(tmpBuffer, tmpSize, (unsigned char*)SCRIPT_KEY, sizeof(SCRIPT_KEY), &amp;codeBufferSize);

    if (codeBuffer)
    {
        if (luaL_loadbuffer(L, (char*)codeBuffer, codeBufferSize, filename.c_str()) != 0)
        {
            luaL_error(L, "error loading module %s from file %s :\n\t%s",
                lua_tostring(L, 1), filename.c_str(), lua_tostring(L, -1));
        }
        delete []codeBuffer;
    }
    else
    {
        CCLog("can not get file data of %s", filename.c_str());
    }

    return 1;
}
</code></pre>

<p>我们采用的是xxtea加密，所以在这里，调用相反的算法，使用相同的秘钥SCRIPT_KEY 解密。
cocos2dx_lua_loader 这个函数会在当lua文件被required 进来的时候调用，因此就达到了加密和
解密的效果。
enjoying!
就在昨天，quick-cocos2dx 的2.2.1版本发布，已经支持lua的加密和解密了，也可以参考一下
<a href="http://cn.quick-x.com/">http://cn.quick-x.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua代码加密]]></title>
    <link href="http://zhizhen.github.io/blog/2013/11/22/luadai-ma-jia-mi/"/>
    <updated>2013-11-22T12:45:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/11/22/luadai-ma-jia-mi</id>
    <content type="html"><![CDATA[<p>开发者为了防止代码泄漏，在发布前一般会对脚本进行加密，加密方式有多种，
比如常见的AES, XXTEA .. 等等，在cocos2dx加载加密后的lua文件后，解密之后再
执行.</p>

<!--more-->


<hr />

<p>加密工具我用c写了一个,代码放在github上了：<a href="https://github.com/zhizhen/cocos2dx-lua-crypto.git  ">https://github.com/zhizhen/cocos2dx-lua-crypto.git  </a>
关键代码如下</p>

<pre><code>FILE *file;
char* inPath = argv[1];     //源文件路径
char* outPath = argv[2];    //目标文件路径
unsigned char* fileData = malloc(FILE_LEN);

file = fopen(inPath, "rb");
unsigned long num = fread(fileData, 1, FILE_LEN, file);
fclose(file);

unsigned int dataLen = 0;
unsigned char* data = xxtea_encrypt(fileData, num, (unsigned char*)KEY, 32, &amp;dataLen);

file = fopen(outPath, "web+");
fwrite(data, 1, dataLen, file);
fclose(file);
</code></pre>

<p>在sh代码中遍历文件夹，调用c生成的工具对单个文件进行加密</p>

<pre><code>#!/bin/sh
EXDIR=`cd $(dirname $0); pwd`
cd "$EXDIR/$1"

#echo please input source dir:
#read FROMDIR
#echo please input output dir:
#read TODIR

FROMDIR="lua"
TODIR="out"

rm -rf $TODIR
cp -r $FROMDIR $TODIR

deepls(){
    for x in $1/*
    do
        y=`basename $x .lua`
        if [ -f $x ]
        then
            $EXDIR/debug/file_encrypto "$EXDIR/$1/$y.lua" "$EXDIR/$2/$y.so"
        fi
        if [ -d $x ]
        then
            deepls "$1/$y" "$2/$y"
        fi
    done
}

deepls $FROMDIR $TODIR

find $TODIR -name '*.lua' -exec rm {} \;
</code></pre>

<p>执行./build.sh 就能将lua文件夹中的lua脚本全部加密后放到out目录下，然后就剩下
怎么在cocos2dx里面修改代码读取加密后的脚本问题了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx之修改vs2010下丑陋的hellolua模板]]></title>
    <link href="http://zhizhen.github.io/blog/2013/06/15/vs2010pei-zhi-zhi-cocos2dxchou-lou-de-helloluamo-ban/"/>
    <updated>2013-06-15T20:06:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/06/15/vs2010pei-zhi-zhi-cocos2dxchou-lou-de-helloluamo-ban</id>
    <content type="html"><![CDATA[<p>一直想抽时间把cocos2dx入门这自己的经历写一下，终于周末啦！<br/>
首先说明，本人win7用户，IDE是vs2010，编译环境是win32，这篇文章是介绍如何在vs2010中开始你的第一个cocos2dx+lua项目的
前提是你必须安装了vs2010哈！<br/>
第一步，下载<a href="www.cocos2d-x.org/projects/cocos2d-x/wiki/Download">cocos2dx</a>，下载后解压，这个放在哪个目录都没关系。<br/>
第二步，安装cocos2dx工程模板，双击解压后目录下的 install-templates-msvc.bat 这个文件，如下图<br/>
<img src="/images/vs-cocos2d/anzhuangmuban.png" alt="" /><br/>
第三步，打开你的vs2010,文件-> 新建项目，这时候你会看到，已安装的模板一栏里有Cocos2d-win32 Application 这个模板，并且有cocos2dx的经典图标在那！<br/>
<img src="/images/vs-cocos2d/xinjianxiangmu.png" alt="" /><br/>
这时候，你需要输入名称，然后点确认.<br/>
<img src="/images/vs-cocos2d/Wizard.png" alt="" /><br/>
点击下一步<br/>
<img src="/images/vs-cocos2d/selectengine.png" alt="Select engile" /><br/>
选择引擎，这里选择audio和lua引擎<br/>
然后就能看到刚刚创建的项目了:<br/>
<img src="/images/vs-cocos2d/initproject.png" alt="init project" /><br/>
这时候如果我们点debug按钮，项目是不能运行起来的，因为它缺少一些库<br/>
第四步，运行cocos2dx目录下，也就是之前解压的目录下的build-win32.bat，等运行完后，会在当前目录下生成Debug.win32这个目录
<img src="/images/vs-cocos2d/buildcocos2d.png" alt="build cocos2dx" />
然后找到Demo项目下的Debug.win32,如果没有这个目录的话，执行一下Demo项目的Debug就有了（尽管执行报错），但是会生成这个目录:
<img src="/images/vs-cocos2d/demodebugdir.png" alt="" />
然后我们把cocos2dx/Debug.win32 这个目录下的这些文件拷贝到 Demo/Debug.win32 下</p>

<pre><code>glew32.lib
libcocos2d.lib
libCocosDenshion.lib
liblua.lib
lua51.lib
pthreadVCE2.lib

glew32.dll
libcocos2d.dll
libCocosDenshion.dll
libtiff.dll
lua51.dll
pthreadVCE2.dll
zlib1.dll
</code></pre>

<p>有点多，需要一个一个拷贝过去，如果缺了其中一个的话，会报错<br/>
<img src="/images/vs-cocos2d/libs.png" alt="libs" /><br/>
第五步，在Demo/Demo目录下创建Libs目录，把cocos2dx目录下的cocos2dx;CocosDenshion;extensions;以及cocos2dx/scripting 目录下的lua 都拷贝到新建的Libs中来。<br/>
<img src="/images/vs-cocos2d/copylibs.png" alt="copylibs" /><br/>
第六步，配置包含路径，项目上点右键 &ndash;> 属性 &ndash;> C/C++ &ndash;> 常规-> 附加包含目录 ，删除它原来的那些，将下面这些加入<br/>
<img src="/images/vs-cocos2d/fujiamulu.png" alt="fujiamulu" /><br/>
再打开链接器的输入，加入lua51.lib
<img src="/images/vs-cocos2d/lianjieqi.png" alt="lianjieqi" />
设置完后点击应用，然后就可以运行了，结果如下，瞧！一个小农场游戏：
<img src="/images/vs-cocos2d/Demo.png" alt="Demo" /></p>

<p>当然，还没完，因为我们不仅仅是要运行第一个cocos2dx + lua项目，我们是要改它生成的不美观的目录结构：
<img src="/images/vs-cocos2d/demo_pic1.png" alt="" /><img src="/images/vs-cocos2d/demo_pic2.png" alt="" />
首先，删掉Demo目录下的proj.win32文件夹，因为里面什么东西都没有！<br/>
然后在项目的资源管理器面板中，在Demo.rc;Demo.ico;Demo.png这三个文件上点击右键-> 移除-> 删除;
再删除Demo/Demo/proj.win32下的res文件夹.<br/>
将main.h;main.cpp这两个文件移动到Demo/Demo/Classes 文件夹中.退出vs2010.<br/>
将Demo.win32.vcxproj;Demo.win32.vcxproj.filters;Demo.win32.vcxproj.user 三个文件移动到Demo目录下；删除Demo/Demo/proj.win32这个文件夹<br/>
将Demo/Demo下的Classes;Libs;Resources三个文件夹移动到Demo目录下；并删除Demo/Demo这个目录.<br/>
修改完之后，整个项目目录结构是这样子的：
<img src="/images/vs-cocos2d/final.png" alt="" /><br/>
然而这时候是无法打开项目的，打开Demo.sln文件编辑,并删掉这一部分：
<img src="/images/vs-cocos2d/modifysln.png" alt="" /><br/>
删除Demo.win32.vcxproj.filters这个文件，让我们来重新设置filters过滤器,删除之后打开Demo.sln。移除项目中的所有文件:
然后依次按照我们项目中Classes;Libs;Resources这样的目录重新设置filters,分别用点击右键 &ndash;> 添加筛选器;右键 &ndash;> 添加现有项， 将我们的文件导入:
<img src="/images/vs-cocos2d/newfilter.png" alt="" /><br/>
由于采用的是相对路径，所以附加目录这里得改一下啦：
<img src="/images/vs-cocos2d/newfujia.png" alt="" /><br/>
还有这里，我习惯把中间目录跟Debug目录放到一块儿去
<img src="/images/vs-cocos2d/zhongjianmulu.png" alt="" /><br/>
这时候改完之后发现跑不动了，因为找不到Resources目录
<img src="/images/vs-cocos2d/resourcebug.png" alt="" /><br/>
看到没，在这里设置的
<img src="/images/vs-cocos2d/resourcefinal.png" alt="" /><br/>
好了，修改完之后，又能够看到我们的农场游戏了：
<img src="/images/Demo.png" alt="" /><br/>
这时候的项目组织方式，已经按照我自己的想法完全改了:
<img src="/images/vs-cocos2d/final.png" alt="" /><br/>
按照这些方法，你完全可以以你自己的方式去组织项目结构</p>
]]></content>
  </entry>
  
</feed>
