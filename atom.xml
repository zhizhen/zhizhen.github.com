<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhizhen's Blog]]></title>
  <link href="http://zhizhen.github.io/atom.xml" rel="self"/>
  <link href="http://zhizhen.github.io/"/>
  <updated>2013-05-14T10:30:29+08:00</updated>
  <id>http://zhizhen.github.io/</id>
  <author>
    <name><![CDATA[zhizhen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git命令备忘]]></title>
    <link href="http://zhizhen.github.io/blog/2013/05/13/gitming-ling-bei-wang/"/>
    <updated>2013-05-13T12:21:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/05/13/gitming-ling-bei-wang</id>
    <content type="html"><![CDATA[<h2>Git配置</h2>

<pre><code>git config --global user.name "robbin"   
git config --global user.email "fankai@gmail.com"
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor "mate -w"    # 设置Editor使用textmate
git config -l  # 列举所有配置
</code></pre>

<p>用户的git配置文件<code>~/.gitconfig</code></p>

<h2>Git常用命令</h2>

<h3>查看、添加、提交、删除、找回，重置修改文件</h3>

<pre><code>git help &lt;command&gt;  # 显示command的help
git show            # 显示某次提交的内容
git show $id

git co  -- &lt;file&gt;   # 抛弃工作区修改
git co  .           # 抛弃工作区修改

git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区
git add .           # 将所有修改过的工作文件提交暂存区

git rm &lt;file&gt;       # 从版本库中删除文件
git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件

git reset &lt;file&gt;    # 从暂存区恢复到工作文件
git reset -- .      # 从暂存区恢复到工作文件
git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci &lt;file&gt;
git ci .
git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
git ci -am "some comments"
git ci --amend      # 修改最后一次提交记录

git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     # 恢复最后一次提交的状态
</code></pre>

<h3>查看文件diff</h3>

<pre><code>git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异
git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
</code></pre>

<h3>查看提交记录</h3>

<pre><code>git log
git log &lt;file&gt;      # 查看该文件每次提交记录
git log -p &lt;file&gt;   # 查看每次详细修改内容的diff
git log -p -2       # 查看最近两次详细修改内容的diff
git log --stat      # 查看提交统计信息
</code></pre>

<h3>tig</h3>

<p>Mac上可以使用tig代替diff和log，<code>brew install tig</code></p>

<h2>Git 本地分支管理</h2>

<h3>查看、切换、创建和删除分支</h3>

<pre><code>git br -r           # 查看远程分支
git br &lt;new_branch&gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支

git co &lt;branch&gt;     # 切换到某个分支
git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去
git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch

git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支

git br -d &lt;branch&gt;  # 删除某个分支
git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
</code></pre>

<h3>分支合并和rebase</h3>

<pre><code>git merge &lt;branch&gt;               # 将branch分支合并到当前分支
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：
git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;
</code></pre>

<h2>Git补丁管理(方便在多台机器上开发同步时用)</h2>

<pre><code>git diff &gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
</code></pre>

<h2>Git暂存管理</h2>

<pre><code>git stash                        # 暂存
git stash list                   # 列所有stash
git stash apply                  # 恢复暂存的内容
git stash drop                   # 删除暂存区
</code></pre>

<h2>Git远程分支管理</h2>

<pre><code>git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上

git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名
git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支
git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支
</code></pre>

<h2>Git远程仓库管理</h2>

<pre><code>git remote -v                    # 查看远程服务器地址和仓库名称
git remote show origin           # 查看远程服务器仓库状态
git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址
git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)
git remote rm &lt;repository&gt;       # 删除远程仓库
</code></pre>

<h3>创建远程仓库</h3>

<pre><code>git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上

mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址
git push -u origin master                                      # 客户端首次提交
git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
</code></pre>

<p>也可以命令设置跟踪远程库和本地库</p>

<pre><code>git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[to be a hacker]]></title>
    <link href="http://zhizhen.github.io/blog/2013/05/10/to-be-a-hacker/"/>
    <updated>2013-05-10T16:37:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/05/10/to-be-a-hacker</id>
    <content type="html"><![CDATA[<p>Yeah ! to be a hacker , and write a blog with coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[create a limited size collection]]></title>
    <link href="http://zhizhen.github.io/blog/2013/03/14/create-a-limited-size-collection/"/>
    <updated>2013-03-14T15:17:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/03/14/create-a-limited-size-collection</id>
    <content type="html"><![CDATA[<p>we create a collection with limited size 100000:</p>

<pre><code>&gt; db.createCollection("colcase1", {capped:true, size:100000})
{ "ok" : 1 }
&gt; show collections
colcase
colcase1
system.indexes
&gt;
</code></pre>

<p>and, we can convert a exist collection to a limited one:</p>

<pre><code>&gt; db.colcase.isCapped()
false
&gt; db.runCommand({"convertToCapped":"colcase",size:100000})
{ "ok" : 1 }
&gt; db.colcase.isCapped()
true
&gt;
</code></pre>

<p>Look ! we did it</p>

<p>image (/sources/images/qiaofeng.jpg)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[simple introduction of mongodb]]></title>
    <link href="http://zhizhen.github.io/blog/2013/03/12/simple-introduce-of-mongodb/"/>
    <updated>2013-03-12T16:12:00+08:00</updated>
    <id>http://zhizhen.github.io/blog/2013/03/12/simple-introduce-of-mongodb</id>
    <content type="html"><![CDATA[<p>suppose you have correctly installed the mongodb, and opened a shell like this:</p>

<pre><code>zhang@linux:~$ mongo
MongoDB shell version: 2.0.4
connecting to: test
&gt;
</code></pre>

<p>first of all, let&rsquo;s show all the dbs:</p>

<pre><code>zhang@linux:~$ mongo
MongoDB shell version: 2.0.4
connecting to: test
&gt; show dbs
local   (empty)
&gt;
</code></pre>

<p>then let&rsquo;s use one of it, we can switch between dbs use:</p>

<pre><code>&gt; show dbs
local   (empty)
&gt; use local
switched to db local
&gt;
</code></pre>

<p>someone may ask, how to create a database then ? yeah, good question !<br/>
In Mysql we can use &ldquo;create database Name;&rdquo; to create a database, but,
MongoDB didn&rsquo;t provides any command to create database, Actually, we don&rsquo;t need to do it !
Look ! we just defined a database by command &ldquo;use mydatabase&rdquo;, which is not created yet</p>

<pre><code>&gt; use mydatabase
switched to db mydatabase
&gt; show dbs
local   (empty)
&gt;
</code></pre>

<p>MongoDB create it when we first save value into it</p>

<pre><code>&gt; db.colcase.save( {testcase:"hello"} )
&gt; show dbs
local   (empty)
mydatabase  0.0625GB
&gt; show collections
colcase
system.indexes
&gt; db.colcase.find()
{ "_id" : ObjectId("513fe233aac1372ab215f350"), "testcase" : "hello" }
&gt;
</code></pre>

<p>P.S MongoDB created the &ldquo;colcase&rdquo; collection and the &ldquo;mydatabase&rdquo; database automatically
when we first save value into it.</p>
]]></content>
  </entry>
  
</feed>
